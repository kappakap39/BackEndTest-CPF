//! backend to

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  UserID     String    @id @default(uuid()) @db.Uuid
  Email      String    @unique @db.VarChar(255)
  Password   String    @db.VarChar(255)
  FirstName  String    @db.VarChar(255)
  LastName   String    @db.VarChar(255)
  Level      String?
  Img        String?
  Address    Json?     @db.Json()
  Tel        String    @db.VarChar(10)
  Otp        String?
  OtpExpired DateTime?
  Status     Boolean   @default(true)
  Remove     Boolean   @default(false)
  Active     Boolean   @default(false)
  CreatedAt  DateTime  @default(now())
  UpdatedAt  DateTime  @updatedAt

  token Token[] @relation(name: "Tokens")

  loggets Loggets[] @relation(name: "loggets")

  file File[] @relation(name: "File")
}

model Token {
  TokenID    String   @id @default(uuid()) @db.Uuid
  CreatedAt  DateTime @default(now())
  UpdatedAt  DateTime @updatedAt
  Expiration DateTime
  UserID     String   @db.Uuid
  TokenValue String
  user       User     @relation(name: "Tokens", fields: [UserID], references: [UserID])
  // user User  @relation(name: "Token", fields: [UserID], references: [UserID], onDelete: Cascade)
}

model File {
  FileID       String   @id @default(uuid()) @db.Uuid
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime @updatedAt
  UserID       String   @db.Uuid
  FileName     String   @unique
  OriginalName String   
  FilePath     String   
  FileKey      String   
  Mimetype     String   
  FileSize     String   

  user User @relation(name: "File", fields: [UserID], references: [UserID])
}

model Loggets {
  FileID     String   @id @default(uuid()) @db.Uuid
  CreatedAt  DateTime @default(now())
  UpdatedAt  DateTime @updatedAt
  UserID     String   @db.Uuid
  TypeLogger String

  user User @relation(name: "loggets", fields: [UserID], references: [UserID])
}
