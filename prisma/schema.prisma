//! bomb

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model People {
  PeopleID  String   @id @default(uuid()) @db.Uuid
  Username  String   @unique @db.VarChar(255)
  Status    Boolean? @default(true)
  Email     String   @db.VarChar(255)
  FirstName String   @db.VarChar(255)
  LastName  String   @db.VarChar(255)
  Tel       String   @db.VarChar(20)
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
}

model User {
  UserID     String    @id @default(uuid()) @db.Uuid
  Email      String    @unique @db.VarChar(255)
  Password   String    @db.VarChar(255)
  FirstName  String    @db.VarChar(255)
  LastName   String    @db.VarChar(255)
  Level      String?
  Img        String?
  Address    Json?     @db.Json()
  Tel        String    @db.VarChar(10)
  Otp        String?
  OtpExpired DateTime?
  Status     Boolean   @default(true)
  Remove     Boolean   @default(false)
  Active     Boolean   @default(false)
  CreatedAt  DateTime  @default(now())
  UpdatedAt  DateTime  @updatedAt

  // เพิ่มความสัมพันธ์กับ Product
  order Order[] @relation("OrderToUser")

  token Token[] @relation(name: "Tokens")

  loggets Loggets[] @relation(name: "loggets")

  file File[] @relation(name: "File")
}

model ProductCategory {
  CategoryID   String   @id @default(uuid()) @db.Uuid
  CategoryName String   @db.VarChar(255)
  Description  String?  @db.VarChar(511)
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime @updatedAt

  // เพิ่มความสัมพันธ์กับ Product
  products Product[] @relation("ProductCategoryToProduct")
}

model Product {
  ProductID   String   @id @default(uuid()) @db.Uuid
  CateGoryID  String   @db.Uuid
  ProductName String   @db.VarChar(255)
  Description String?  @db.VarChar(511)
  Price       Float
  Stock       Int
  Status      Boolean  @default(true)
  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt

  // เพิ่มความสัมพันธ์กับ ProductCategory
  category ProductCategory @relation("ProductCategoryToProduct", fields: [CateGoryID], references: [CategoryID])
  // เพิ่มความสัมพันธ์กับ Product
  product  OrderDetial[]   @relation("ProductToOrderDetail")
}

model Order {
  OrderID        String   @id @default(uuid()) @db.Uuid
  UserID         String   @db.Uuid
  DeliveryStatus Boolean  @default(false)
  CreatedAt      DateTime @default(now())
  UpdatedAt      DateTime @updatedAt

  // เพิ่มความสัมพันธ์กับ User
  user         User          @relation("OrderToUser", fields: [UserID], references: [UserID])
  // เพิ่มความสัมพันธ์กับ OrderDetail
  orderDetails OrderDetial[] @relation("OrderToOrderDetail")
}

model OrderDetial {
  OrderDetailID String   @id @default(uuid()) @db.Uuid
  OrderID       String   @db.Uuid
  ProductID     String   @db.Uuid
  Amount        Int
  Price         Float
  CreatedAt     DateTime @default(now())
  UpdatedAt     DateTime @updatedAt

  // เพิ่มความสัมพันธ์กับ Order
  order   Order   @relation("OrderToOrderDetail", fields: [OrderID], references: [OrderID])
  // เพิ่มความสัมพันธ์กับ Product
  product Product @relation("ProductToOrderDetail", fields: [ProductID], references: [ProductID])
}

model Token {
  TokenID    String   @id @default(uuid()) @db.Uuid
  CreatedAt  DateTime @default(now())
  UpdatedAt  DateTime @updatedAt
  Expiration DateTime
  UserID     String   @db.Uuid
  TokenValue String
  user       User     @relation(name: "Tokens", fields: [UserID], references: [UserID])
  // user User  @relation(name: "Token", fields: [UserID], references: [UserID], onDelete: Cascade)
}

model File {
  FileID       String   @id @default(uuid()) @db.Uuid
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime @updatedAt
  UserID       String   @db.Uuid
  FileName     String   @unique
  OriginalName String
  FilePath     String
  FileKey      String
  Mimetype     String
  FileSize     String

  user User @relation(name: "File", fields: [UserID], references: [UserID])
}

model Loggets {
  LoggetID   String   @id @default(uuid()) @db.Uuid
  CreatedAt  DateTime @default(now())
  UpdatedAt  DateTime @updatedAt
  UserID     String   @db.Uuid
  TypeLogger String

  user User @relation(name: "loggets", fields: [UserID], references: [UserID])
}

model UserManagement {
  IDUserOrAdmin        String    @id @default(uuid()) @db.Uuid
  //!Tab1
  UserName             String
  Password             String
  Pincode              String?
  UserLevel            String
  EffectiveDate        DateTime?
  ExpiredDate          DateTime?
  InvalidPasswordCount Int?
  SecretQuestion       String?
  Answer               String?
  Status               Boolean   @default(true)
  //!Tab2
  Title                String?
  FirstName            String?
  LastName             String?
  AbbreviateName       String?
  Email                String?   @unique
  Telephone            String?   @db.VarChar(10)
  CitiZenID            String?
  Picture              String?
  //!Tab3
  EmpNo                String?
  DeptCode             String?
  CompanyCode          String?
  OperationCode        String?
  SubOperationCode     String?
  CentralRefNo         String?
  BusinessType         String?
  DocIssueUnit         String?
  LockLocation         String?
  DeptFlag             String?
  GrpSubOperation      String?
  GrpOperationCode     String?
  //!Tab4
  DefaultLanguage      String?
  FontFamily           String?
  FontSize             Float?
  DateFormat           DateTime?
  TimeZone             DateTime?
  AmountFormat         Int?
  //!Standard
  CreatedAt            DateTime  @default(now())
  UpdatedAt            DateTime  @updatedAt
}
